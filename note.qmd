---
title: "メモ"
format: html
---

```{r}
#| warning: false
library(arrow) # 10.0.1
library(dplyr) # 1.0.10
library(data.table) # 1.14.6
source(here::here("R/schema.R"))
```

```{r}
pins_resources_local <-
  pins::board_folder(here::here("data-raw"))
```

## 断面交通量情報データ

- 公益財団法人日本道路交通情報センター https://www.jartic.or.jp が提供
- 各都道府県警察が車両感知器などの計測機器で収集した断面交通量に関する情報を警察庁においてとりまとめたもの
    - 毎月、都道府県警察(北海道警察は5方面)ごとに`.zip`ファイルを更新
    
```{r}
#| eval: false
#| echo: true
# 日本道路交通情報センター提供のデータを読み込むパッケージ
remotes::install_github("uribo/jarticr")
```

各ファイルの中身は次のようになっています。

```{r}
dplyr::glimpse(
  jarticr::read_jartic_traffic(
    here::here("data-raw/typeB_tokushima_2022_10/徳島県警_202210.csv")))
```

- `datetime`: 時刻。5分単位で記録
- `source_code`: 情報源コード
- `location_no`: 計測地点番号
- `location_name`: 計測地点名称
- `meshcode10km`: 2次メッシュコード
- `link_type`: リンク区分
- `link_no`: リンク番号
- `traffic`: 断面交通量。ある道路断面をある方向に通過する単位時間当たりの交通量（単位: 台）
- `to_link_end_10m`: リンク終端からの距離
- `link_ver`: リンクバージョン


### 元データ（CSV）のサイズ

- 2018年11月から2022年10月のデータ48ヶ月（4年）分を収集

```{r}
#| include: false
df_my_dropbox <- 
  pins_resources_local |> 
  pins::pin_read("typeB_zip_files") |> 
  dplyr::mutate(size = fs::as_fs_bytes(size))
```

```{r}
#| eval: true
#| echo: false
sum(df_my_dropbox$size, 
    fs::as_fs_bytes("4.13GB"), 
    fs::as_fs_bytes("4.3GB"))
```

```{r}
#| eval: false
#| echo: false
# open_dataset("data/typeB/13_tokyo/year=2021/month=1") |>
#   write_csv_arrow(file = "data/tokyo202101_small.csv")
# open_dataset("data/typeB/13_tokyo/year=2021") |> 
#   write_csv_arrow(file = "data/tokyo2021_medium.csv")
# open_dataset(here::here("data/typeB/"),
#                schema = jartic_typeB_schema) |> 
#   filter(year == 2021) |> 
#   write_csv_arrow(file = "data/all2021_large.csv")
```

```{r}
#| eval: false
#| echo: false
# small: 東京都 1ヶ月分
fs::dir_info(here::here("data/typeB/13_tokyo/year=2021/month=1/"),
             recurse = TRUE,
             regexp = ".parquet") |> 
  pull(size) |> 
  sum() # 102MB
# medium: 東京都 12ヶ月分
fs::dir_info(here::here("data/typeB/13_tokyo/year=2021/"),
             recurse = TRUE,
             regexp = ".parquet") |> 
  pull(size) |> 
  sum() # 1.17GB
# large: 全国 12ヶ月（1年）分
fs::dir_info(here::here("data/typeB/"),
             recurse = TRUE,
             regexp = "year=2021/month=.+/.+.parquet") |> 
  pull(size) |> 
  sum() # 13.5GB
# huge: 全国 48ヶ月（4年）分
fs::dir_info(here::here("data/typeB/"),
             recurse = TRUE,
             regexp = "year=.+/month=.+/.+.parquet") |> 
  pull(size) |> 
  sum() # 54.1G
```

## {arrow}パッケージを使った処理の流れ

```{r}
# 単一のparquetファイルの読み込み
d <- 
  read_parquet(here::here("data/typeB/36_tokushima/year=2022/month=10/part-0.parquet"), 
               # as_data_frame = FALSE で Arrowオブジェクトとしてメモリ内で処理を行う
               as_data_frame = FALSE)

# dplyrの関数を使ったデータ操作・集計
res <- 
  d |> 
  select(location_no, location_name, 
         meshcode10km, traffic) |> 
  filter(meshcode10km %in% c("513424", "513403", "513404")) |> 
  group_by(location_no, location_name) |> 
  summarise(traffic_mean = mean(traffic, na.rm = TRUE),
            .groups = "drop") |> 
  arrange(desc(traffic_mean)) |> 
  # データフレームとして返り値を得る
  collect()

res
```


## {duckdb}パッケージとの連携

```{r}

```


## 評価の観点・タスク

### 評価の観点

10kmメッシュ

## 処理1: データの読み込み

### 1. 個別のファイル

#### 1.1 csv

::: {.panel-tabset}

## Small

```{r}
df_benchmark_input_small <- 
  pins_resources_local |> 
  pins::pin_read("benchmark_input_small")
df_benchmark_input_small
```

## Medium

```{r}
df_benchmark_input_medium <- 
  pins_resources_local |> 
  pins::pin_read("benchmark_input_medium")
df_benchmark_input_medium
```

:::


#### 1.2 parquet

```{r}
#| eval: false
# data.tableの状態で保存したため、data.tableになっている
read_parquet(here::here("data/typeB/36_tokushima/year=2022/month=10/part-0.parquet"))
```



### 2. 複数のファイル（parquetのみ）

スキーマの指定

```{r}
jartic_typeB_schema
```

```{r}
traffic_small <- 
  open_dataset(here::here("data/typeB/13_tokyo/year=2021/month=1/"),
               schema = jartic_typeB_schema)
traffic_medium <-
  open_dataset(here::here("data/typeB/13_tokyo/year=2021/"),
               schema = jartic_typeB_schema)
traffic_large <- 
  open_dataset(here::here("data/typeB/"),
               schema = jartic_typeB_schema) |> 
  filter(year == 2021)
traffic_huge <- 
  open_dataset(here::here("data/typeB/"),
               schema = jartic_typeB_schema)
```


## session information

```{r}
sessioninfo::session_info(info = "platform")
```
